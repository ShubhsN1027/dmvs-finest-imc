#https://kollider.medium.com/build-a-crypto-market-making-bot-in-python-d71eeae2dcd7
#https://www.reddit.com/r/algotrading/comments/6q8dp6/market_making_theory_and_application_readings/
from typing import Dict, List
from datamodel import OrderDepth, TradingState, Order


class Trader:
    PROFIT_TARGET = 0.1
    RISK_ADJUSTMENT = 0.5
    ORDER_SIZE = 1

    def run(self, state: TradingState) -> Dict[str, List[Order]]:
        """
        Only method required. It takes all buy and sell orders for all symbols as an input,
        and outputs a list of orders to be sent
        """
        # Initialize the method output dict as an empty dict
        result = {}
        # Iterate over all the keys (the available products) contained in the order depths
        for product in state.order_depths.keys():
            orders: list[Order] = []
            # Retrieve the Order Depth containing all the market BUY and SELL orders for PEARLS
            order_depth: OrderDepth = state.order_depths[product]

            if len(order_depth.sell_orders) > 0 and len(order_depth.buy_orders) > 0 and product == "BANANAS":
                best_bid = max(order_depth.buy_orders.keys())
                best_ask = min(order_depth.sell_orders.keys())
                spot_price = (best_ask + best_bid)/2
                spread = best_ask - best_bid + self.PROFIT_TARGET
                spread_pct = spread/spot_price
                position = state.position[product]
                skew = (position/self.ORDER_SIZE) * (spread_pct/2) * -1

                new_spot_price = spot_price*(1+skew)
                quote_bid = new_spot_price*(1-spread_pct/2)
                quote_ask = new_spot_price*(1+spread_pct/2)

                orders.append(Order(product, quote_bid, self.ORDER_SIZE))
                orders.append(Order(product, quote_ask, -self.ORDER_SIZE))
                result[product] = orders
                


        print("own trades: ", state.own_trades)
        
        return result